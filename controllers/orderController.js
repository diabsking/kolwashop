const Order = require("../models/Order");
const nodemailer = require("nodemailer");

// Configuration de Mailo (utilisation du host recommand√©)
const transporter = nodemailer.createTransport({
  host: "mail.mailo.com",
  port: 465,
  secure: true,
  auth: {
    user: "kolwazshopp@mailo.com",
    pass: process.env.MAILO_PASSWORD // Assurez-vous d'utiliser une variable d'environnement
  }
});

// Fonction pour afficher le panier
exports.viewCart = (req, res) => {
  console.log("Affichage du panier demand√©");
  res.status(200).json({ message: "Affichage du panier" });
};

// Fonction pour ajouter un produit au panier
exports.addToCart = (req, res) => {
  console.log("Ajout d'un produit au panier");
  res.status(200).json({ message: "Produit ajout√© au panier" });
};

// Fonction pour confirmer une commande
exports.confirmOrder = async (req, res) => {
  console.log("Requ√™te de confirmation de commande re√ßue");
  const session = await Order.startSession();
  try {
    session.startTransaction();
    console.log("Transaction d√©marr√©e");

    const { courriel, adresse, phoneNumber, panierObjets, customerName } = req.body;
    console.log("Donn√©es re√ßues :", { courriel, adresse, phoneNumber, panierObjets, customerName });

    if (!courriel?.trim() || !adresse?.trim() || !phoneNumber?.trim() || !Array.isArray(panierObjets) || panierObjets.length === 0) {
      console.error("Validation √©chou√©e : Champs manquants ou panier vide");
      return res.status(400).json({ message: "Tous les champs sont requis et le panier ne peut pas √™tre vide !" });
    }

    const clientName = customerName?.trim() || courriel.split("@")[0];
    console.log("Nom du client d√©termin√© :", clientName);

    const mappedCartItems = panierObjets.map(item => ({
      name: item.nom,
      price: Number(item.prix) || 0,
      description: item.description || "",
      imageUrl: item.imageUrl,
      sellerEmail: item["sellerE-mail"],
      quantity: item.quantity || 1,
      addedAt: item.ajout√©√Ä ? new Date(item.ajout√©√Ä) : new Date()
    }));
    console.log("Produits mapp√©s :", mappedCartItems);

    const ordersBySeller = mappedCartItems.reduce((acc, item) => {
      if (!item.sellerEmail) {
        throw new Error(`Produit \"${item.name}\" sans email vendeur.`);
      }
      acc[item.sellerEmail] = acc[item.sellerEmail] || [];
      acc[item.sellerEmail].push(item);
      return acc;
    }, {});
    console.log("Produits regroup√©s par vendeur :", ordersBySeller);

    const sellerOrders = {};

    for (const sellerEmail in ordersBySeller) {
      console.log(`Cr√©ation de la commande pour le vendeur: ${sellerEmail}`);
      const order = new Order({
        customerName: clientName,
        email: courriel,
        shippingAddress: adresse,
        phoneNumber,
        products: ordersBySeller[sellerEmail],
        orderStatus: "Commande en pr√©paration"
      });

      await order.save({ session });
      console.log(`Commande sauvegard√©e pour le vendeur: ${sellerEmail}`);
      sellerOrders[sellerEmail] = order;
    }

    for (const sellerEmail in sellerOrders) {
      const order = sellerOrders[sellerEmail];
      const productDetails = order.products.map(prod => `- ${prod.name} (${prod.quantity} x ${prod.price} FCFA)\nüì∑ Photo: ${prod.imageUrl}`).join("\n\n");

      console.log(`Envoi de l'email au vendeur: ${sellerEmail}`);
      await transporter.sendMail({
        from: "kolwazshopp@mailo.com",
        to: sellerEmail,
        subject: "Nouvelle commande re√ßue",
        text: `Bonjour,\n\nVous avez re√ßu une nouvelle commande.\n\nüõí D√©tails de la commande :\n${productDetails}\n\nüìç Informations de livraison :\nüë§ Client : ${clientName}\nüìç Adresse : ${adresse}\nüìû T√©l√©phone : ${phoneNumber}\n\nMerci de traiter cette commande rapidement.\n\n‚Äî Kolwaz Shop`
      });
      console.log(`Email envoy√© au vendeur: ${sellerEmail}`);
    }

    const clientProducts = mappedCartItems.map(item => `- ${item.name} (${item.quantity} x ${item.price} FCFA)`).join("\n");

    console.log("Envoi de l'email de confirmation au client :", courriel);
    await transporter.sendMail({
      from: "kolwazshopp@mailo.com",
      to: courriel,
      subject: "Confirmation de votre commande",
      text: `Bonjour ${clientName},\n\n‚úÖ Votre commande a bien √©t√© enregistr√©e !\n\nüõí D√©tails de votre commande :\n${clientProducts}\n\nüöö Votre commande est en cours de pr√©paration et sera livr√©e √† :\nüìç ${adresse}\nüìû ${phoneNumber}\n\nMerci pour votre confiance !\n\n‚Äî Kolwaz Shop`
    });
    console.log("Email de confirmation envoy√© au client :", courriel);

    await session.commitTransaction();
    session.endSession();
    console.log("Transaction valid√©e");

    res.status(200).json({ message: `Commande confirm√©e pour ${mappedCartItems.length} produit(s).` });
  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error("Erreur lors de la validation de la commande :", err);
    res.status(500).json({ error: err.message });
  }
};

// Fonction pour confirmer la livraison
exports.confirmDelivery = (req, res) => {
  console.log("Confirmation de livraison re√ßue");
  res.status(200).json({ message: "Livraison confirm√©e" });
};
